<!DOCTYPE html>
<html lang="zh-TW">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>瑞濱 Rui-Bin——情感、文字與聲音的距離</title>
<style>
  body {
    font-family: 'Arial', sans-serif;
    background: #0A1D2A;
    color: #d1ccbb;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
  }
  .header-image {
    width: 100%;
    max-height: 150px;
    object-fit: cover;
  }
  .container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 0 10px;
    overflow: hidden;
  }
  .audio-controls {
    width: 100%;
    max-width: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: rgb(25, 24, 32);
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
  }
  .audio-image {
    width: 100%;
    aspect-ratio: 1 / 1; /* 正方形 */
    object-fit: cover;
    border-radius: 10px;
    box-shadow: 0 4px 13px rgba(0,0,0,0.2);
    margin-bottom: 10px;
  }
  .image-name {
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 10px;
  }
  .progress-bar {
    width: 100%;
    height: 10px;
    margin-bottom: 10px;
    border-radius: 5px;
    background-color: #ddd;
  }
  .button-row {
    display: flex;
    justify-content: center;
    gap: 10px;
    width: 100%;
  }
  button, select {
    flex: 1;
    height: 40px;
    font-size: 18px;
    border-radius: 10px;
    border: none;
    cursor: pointer;
    background-color: #d1ccbb;
    color: #0A1D2A;
    transition: background-color 0.3s;
  }
  button:hover, select:hover {
    background-color: #b6ad8e;
  }
  .nav-buttons {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: 400px;
    margin-top: 15px;
  }
  .nav-buttons button {
    flex: none;
    width: 120px;
  }
  @media (min-width: 600px) {
    .container {
      max-width: 500px;
      margin: 0 auto;
    }
  }
</style>
</head>
<body>

<img src="header-image.jpg" alt="Header Image" class="header-image" />

<div class="container" id="container">
  <!-- 單一播放器區 -->
</div>

<div class="nav-buttons">
  <button id="prevBtn">上一個</button>
  <button id="nextBtn">下一個</button>
</div>

<script>
  const totalAudios = 30;
  const speedLevels = [1, 1.25, 1.5, 2];
  let currentIndex = 1;

  const container = document.getElementById('container');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');

  function createAudioControl(index) {
    container.innerHTML = ''; // 清空內容

    // 建立audio element
    const audio = document.createElement('audio');
    audio.id = `audio${index}`;
    audio.src = `audio${index}.mp3`;
    audio.dataset.speedIndex = 0;

    // 主控div
    const controlDiv = document.createElement('div');
    controlDiv.className = 'audio-controls';

    // 圖片
    const image = document.createElement('img');
    image.src = `audio${index}.jpg`;
    image.alt = `audio${index}圖片`;
    image.className = 'audio-image';
    controlDiv.appendChild(image);

    // 名稱
    const imageName = document.createElement('div');
    imageName.className = 'image-name';
    imageName.textContent = `作品名稱 ${index}`;
    controlDiv.appendChild(imageName);

    // 進度條
    const progressBar = document.createElement('input');
    progressBar.type = 'range';
    progressBar.className = 'progress-bar';
    progressBar.min = 0;
    progressBar.max = 100;
    progressBar.value = 0;
    progressBar.step = 1;
    progressBar.addEventListener('input', () => {
      audio.currentTime = (audio.duration / 100) * progressBar.value;
    });
    controlDiv.appendChild(progressBar);

    // 按鈕列
    const buttonRow = document.createElement('div');
    buttonRow.className = 'button-row';

    const rewindBtn = document.createElement('button');
    rewindBtn.textContent = '⏮';
    rewindBtn.onclick = () => { audio.currentTime = Math.max(0, audio.currentTime - 5); };

    const toggleBtn = document.createElement('button');
    toggleBtn.textContent = '▶';
    toggleBtn.onclick = () => {
      if(audio.paused) {
        audio.play();
        toggleBtn.textContent = '⏸';
      } else {
        audio.pause();
        toggleBtn.textContent = '▶';
      }
    };

    const forwardBtn = document.createElement('button');
    forwardBtn.textContent = '⏭';
    forwardBtn.onclick = () => {
      audio.currentTime = Math.min(audio.duration, audio.currentTime + 5);
    };

    const speedSelect = document.createElement('select');
    speedLevels.forEach(speed => {
      const option = document.createElement('option');
      option.value = speed;
      option.textContent = `${speed}x`;
      speedSelect.appendChild(option);
    });
    speedSelect.onchange = () => {
      audio.playbackRate = speedSelect.value;
    };

    buttonRow.appendChild(rewindBtn);
    buttonRow.appendChild(toggleBtn);
    buttonRow.appendChild(forwardBtn);
    buttonRow.appendChild(speedSelect);

    controlDiv.appendChild(buttonRow);
    container.appendChild(controlDiv);

    // 更新進度條
    audio.addEventListener('timeupdate', () => {
      if(audio.duration) {
        progressBar.value = (audio.currentTime / audio.duration) * 100;
      }
    });

    // 音樂播放完畢自動切換下一首
    audio.addEventListener('ended', () => {
      nextAudio();
    });

    // 停止其它音檔播放（雖然此頁只有一個）
    audio.addEventListener('play', () => {
      document.querySelectorAll('audio').forEach(otherAudio => {
        if (otherAudio !== audio) {
          otherAudio.pause();
        }
      });
    });

    return audio;
  }

  function showAudio(index) {
    if(index < 1) index = totalAudios;
    if(index > totalAudios) index = 1;
    currentIndex = index;
    createAudioControl(index);
  }

  function prevAudio() {
    showAudio(currentIndex - 1);
  }

  function nextAudio() {
    showAudio(currentIndex + 1);
  }

  prevBtn.addEventListener('click', prevAudio);
  nextBtn.addEventListener('click', nextAudio);

  // 初始化顯示第一個
  showAudio(currentIndex);
</script>

</body>
</html>
